# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F85f0ObZLL2vE1qG1ntUaVuw9G8FcR94
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing
import scipy.stats as stats
from scipy.stats import norm
import statistics
import math
import seaborn as sns

df = pd.read_excel('final_steering_day5 (1).xlsx')
df.head()

dfc = pd.read_excel('finalcog_day5.xlsx')
dfc.head(10)

import pandas as pd
import matplotlib.pyplot as plt

# Find the length of the shortest dataset
min_length = min(len(df['Rot Z(rad/s)']), len(dfc['Rot Z(rad/s)']))

# Generate timestamps based on the shortest dataset
start_time = pd.Timestamp('2023-07-01 00:00:00')
time_interval = pd.Timedelta(seconds=0.5)
timestamps = [start_time + i * time_interval for i in range(min_length)]

# Slice the datasets to match the shortest length
df_steering_trimmed = df['Rot Z(rad/s)'][:min_length]
dfc_cog_trimmed = dfc['Rot Z(rad/s)'][:min_length]

# Create scatter plot for both accelerations
plt.figure(figsize=(18, 10))  # Increase the figure size to magnify the graph
plt.plot(timestamps, df_steering_trimmed, alpha=0.6, color='b', label='Steering Angular Velocity Z(rad/s)')
plt.plot(timestamps, dfc_cog_trimmed, alpha=0.6, color='g', label='COG Angular Velocity Z(rad/s)')

# Set plot title and labels
plt.title('Angular velocity Z(rad/s) vs Time', fontsize=24)  # Increase title font size
plt.xlabel('Timestamp', fontsize=18)  # Increase x-axis label font size
plt.ylabel('Angular Velocity Z(rad/s)', fontsize=18)  # Increase y-axis label font size
plt.legend(fontsize=14)  # Increase legend font size
# plt.xlim(pd.Timestamp('2023-07-01 00:00:15'), pd.Timestamp('2023-07-01 01:00:15'))  # Example: zoom in on the first hour
# Add grid
# plt.grid(True)

# Improve the readability of the x-axis by formatting the timestamps
plt.gcf().autofmt_xdate()


# Show the plot
plt.show()

plt.scatter(timestamps,df_steering_trimmed)
plt.show()

nor_accx_steer = np.array(df['Rot Z(rad/s)'])
nor_accx = np.array(dfc['Rot Z(rad/s)'])

# Remove NaN values
nor_accx_steer = nor_accx_steer[~np.isnan(nor_accx_steer)]
nor_accx = nor_accx[~np.isnan(nor_accx)]

# Calculate mean and standard deviation for both datasets
mu_steer = np.mean(nor_accx_steer)
sigma_steer = np.std(nor_accx_steer)
mu_cog = np.mean(nor_accx)
sigma_cog = np.std(nor_accx)

# Generate data points for the Gaussian curves
x_steer = np.linspace(mu_steer - 3*sigma_steer, mu_steer + 3*sigma_steer, 1000)
y_steer = norm.pdf(x_steer, mu_steer, sigma_steer)

x_cog = np.linspace(mu_cog - 3*sigma_cog, mu_cog + 3*sigma_cog, 1000)
y_cog = norm.pdf(x_cog, mu_cog, sigma_cog)

# Plot the Gaussian distributions
plt.figure(figsize=(14, 8))  # Adjust figure size as needed
plt.plot(x_steer, y_steer, label=f'Steering Gaussian Curve ($\mu={mu_steer:.2f}$, $\sigma={sigma_steer:.2f}$)', color='b')
plt.plot(x_cog, y_cog, label=f'COG Gaussian Curve ($\mu={mu_cog:.2f}$, $\sigma={sigma_cog:.2f}$)', color='g')

# Plot the histograms
plt.hist(nor_accx_steer, bins=30, density=True, alpha=0.6, color='b', label='Angular Velocity Z-axis Steering ')
plt.hist(nor_accx, bins=30, density=True, alpha=0.6, color='g', label='Angular Velocity Z-axis COG')

# Add vertical lines for mean and ±1σ, ±2σ for both datasets
plt.axvline(mu_steer, color='b', linestyle='--', linewidth=1, label=f'Steering Mean ($\mu={mu_steer:.2f}$)')
plt.axvline(mu_steer + sigma_steer, color='b', linestyle='--', linewidth=1, label=f'Steering $\mu+\sigma={mu_steer+sigma_steer:.2f}$')
plt.axvline(mu_steer - sigma_steer, color='b', linestyle='--', linewidth=1, label=f'Steering $\mu-\sigma={mu_steer-sigma_steer:.2f}$')
plt.axvline(mu_steer + 2*sigma_steer, color='b', linestyle='--', linewidth=1, label=f'Steering $\mu+2\sigma={mu_steer+2*sigma_steer:.2f}$')
plt.axvline(mu_steer - 2*sigma_steer, color='b', linestyle='--', linewidth=1, label=f'Steering $\mu-2\sigma={mu_steer-2*sigma_steer:.2f}$')

plt.axvline(mu_cog, color='g', linestyle='--', linewidth=1, label=f'COG Mean ($\mu={mu_cog:.2f}$)')
plt.axvline(mu_cog + sigma_cog, color='g', linestyle='--', linewidth=1, label=f'COG $\mu+\sigma={mu_cog+sigma_cog:.2f}$')
plt.axvline(mu_cog - sigma_cog, color='g', linestyle='--', linewidth=1, label=f'COG $\mu-\sigma={mu_cog-sigma_cog:.2f}$')
plt.axvline(mu_cog + 2*sigma_cog, color='g', linestyle='--', linewidth=1, label=f'COG $\mu+2\sigma={mu_cog+2*sigma_cog:.2f}$')
plt.axvline(mu_cog - 2*sigma_cog, color='g', linestyle='--', linewidth=1, label=f'COG $\mu-2\sigma={mu_cog-2*sigma_cog:.2f}$')

# Add labels and title
plt.title('Gaussian Distributions and Histograms of Angular Velocity Z(rad/s)')
plt.xlabel('Angular Velocity Z(rad/s)')
plt.ylabel('Probability Density')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

print(f'Mean of COG Acceleration: {mu_cog:.2f}')
print(f'Standard Deviation of COG Acceleration: {sigma_cog:.2f}')
print(f'First few values of COG Acceleration: {nor_accx[:10]}')